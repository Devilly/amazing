<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mean_machine</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

smokeSpeed = 4;
alarm_set(0, smokeSpeed);
smokeIndex = 0;
smokeAllOut = false;
smokeSprite = spr_mean_machine_smoke;

showSmoke[0] = false;
showSmoke[1] = false;
showSmoke[2] = false;
showSmoke[3] = false;

movementSpeed = 10;

floatingDistanceToShadow = 500;
distanceToShadow = floatingDistanceToShadow;

enum Status {
    movingIn,
    controlled,
    dropping,
    staying,
    ascending,
    movingOut
}
status = Status.movingIn;

// set starting position
x = (view_xview[0] + view_wview[0]) / 2;
y = view_yview[0] - 600;

xRelativeToView = x - view_xview[0];
yRelativeToView = y - view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>status = Status.movingOut;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>status = Status.ascending;
alarm_set(4, room_speed * 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>status = Status.staying;
alarm_set(3, room_speed * 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>status = Status.dropping;
smokeAllOut = false;
alarm_set(2, room_speed / 6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var numberOfSubimages = sprite_get_number(smokeSprite);
smokeIndex = (smokeIndex + 1) % numberOfSubimages;

if(smokeAllOut) {
    smokeIndex = 0;
}

if(smokeIndex == 0) {
    var executeAnimation = ((status == Status.movingIn) ||
        ((status == Status.controlled) &amp;&amp; (alarm_get(1) &gt; (numberOfSubimages * 3 * smokeSpeed))) ||
        (status == Status.ascending) ||
        (status == Status.movingOut));
        
    if(executeAnimation) {
        executeAnimation = random(1) &lt; 0.40;
    }
    
    if(smokeAllOut) {
        executeAnimation = true;
    }

    var index;
    for(index = 0; index &lt; array_length_1d(showSmoke); index++) {
        if(executeAnimation &amp;&amp; random(1) &lt; 0.2) {
            showSmoke[index] = true;
        } else {
            showSmoke[index] = false;
        }
        
        if(smokeAllOut) {
            showSmoke[index] = true;
        }
    }
}

if(smokeAllOut) {
    smokeAllOut = false;
}

alarm_set(0, smokeSpeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// 1. move mean machine according to view movement
x = view_xview[0] + xRelativeToView;
y = view_yview[0] + yRelativeToView;

// 2. move mean machine based on its current status
if(status == Status.movingIn) {
    y += movementSpeed;
    
    if(y &gt;= view_yview[0] + (view_hview[0] / 2) - floatingDistanceToShadow) {
        status = Status.controlled;
        alarm_set(1, room_speed * 5);
    }
} else if(status == Status.controlled) {
    var xTilt = device_get_tilt_y();
    var yTilt = device_get_tilt_x();
    var lowestX = view_xview[0] + 150;
    var highestX = view_xview[0] + view_wview[0] - 150;
    var lowestY = view_yview[0] - 500;
    var highestY = view_yview[0] + view_hview[0] - 500;
    
    if(abs(xTilt) &gt; 0.25) {
        x += round(xTilt) * movementSpeed;
        
        if(x &lt; lowestX) x = lowestX;
        if(x &gt; highestX) x = highestX;
    } else if(abs(yTilt) &gt; 0.5) {
        y += round(yTilt * movementSpeed);
        
        if(y &lt; lowestY) y = lowestY;
        if(y &gt; highestY) y = highestY;
    }
    
    if(alarm_get(1) == (sprite_get_number(smokeSprite) * 2 * smokeSpeed)) {
        smokeAllOut = true;
    }
} else if(status == Status.dropping) {
    var stepsToGo = alarm_get(2);
    var fallPerStep = distanceToShadow / stepsToGo;
    y += fallPerStep;
    distanceToShadow -= fallPerStep;
} else if(status == Status.ascending) {
    var stepsToGo = alarm_get(4);
    var risePerStep = (floatingDistanceToShadow - distanceToShadow) / stepsToGo;
    y -= risePerStep;
    distanceToShadow += risePerStep;
} else if(status == Status.movingOut) {
    y -= movementSpeed;
    
    if(y &lt; view_yview[0] - (floatingDistanceToShadow + 200)) {
        instance_destroy();
    }
}

// save the position relative to the view
// for use in 1. during the next step
xRelativeToView = x - view_xview[0];
yRelativeToView = y - view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_mean_machine_shadow, 0,
    x, y + distanceToShadow,
    1, 1,
    0, c_white, 0.3 + 0.4 * (1 - distanceToShadow / floatingDistanceToShadow));

var cutOff = 0;
var distanceToShadowToTouchMaze = 63 ;
if(distanceToShadow &lt; distanceToShadowToTouchMaze) {
    cutOff = distanceToShadowToTouchMaze - distanceToShadow;
}

draw_sprite_part(spr_mean_machine, 0,
    0, 0,
    sprite_width, sprite_height - cutOff,
    x - (sprite_width / 2), y - (sprite_height / 2));

if(smokeIndex &lt; sprite_get_number(smokeSprite)) {
    if(showSmoke[0]) {
        // lower left
        draw_sprite(smokeSprite, smokeIndex, x - 240, y - 80);
    }
    
    if(showSmoke[1]) {
        // lower right
        draw_sprite_ext(smokeSprite, smokeIndex, x + 240, y - 80, -1, 1, 0, c_white, 1);
    }
    
    if(showSmoke[2]) {
        // upper left
        draw_sprite(smokeSprite, smokeIndex, x - 140, y - 190);
    }
    
    if(showSmoke[3]) {
        // upper right
        draw_sprite_ext(smokeSprite, smokeIndex, x + 140, y - 190, -1, 1, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
